<#@ assembly name="%USERPROFILE%\.nuget\packages\nlog\6.0.2\lib\net46\NLog.dll" #>
<#@ assembly name="%USERPROFILE%\.nuget\packages\nlog.database\6.0.2\lib\net46\NLog.Database.dll" #>
<#@ assembly name="%USERPROFILE%\.nuget\packages\nlog.targets.mail\6.0.2\lib\net46\NLog.Targets.Mail.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="Microsoft.CSharp" #>
<#+
public static string UserProfile { get; } = Environment.GetEnvironmentVariable("USERPROFILE") ?? throw new InvalidOperationException();

public static string[] XmlPaths { get; } =
    [
        Path.Combine(UserProfile, @".nuget\packages\nlog\6.0.2\lib\net46\NLog.xml"),
        Path.Combine(UserProfile, @".nuget\packages\nlog.database\6.0.2\lib\net46\NLog.Database.xml"),
        Path.Combine(UserProfile, @".nuget\packages\nlog.targets.mail\6.0.2\lib\net46\NLog.Targets.Mail.xml")
    ];

public static Type[] NLogTypes { get; } = new []
    {
        Assembly.GetAssembly(typeof(NLog.Targets.Target)).GetTypes(),
        Assembly.GetAssembly(typeof(NLog.Targets.DatabaseTarget)).GetTypes(),
        Assembly.GetAssembly(typeof(NLog.Targets.MailTarget)).GetTypes()
    }.SelectMany(x => x).ToArray();

public static IDictionary<string, string> SummaryMap { get; } = XmlPaths
    .SelectMany(GetXmlMembers)
    .GroupBy(p => p.Key)
    .Select(p => p.First())
    .ToDictionary(k => k.Key, v => v.Value, StringComparer.Ordinal);

public static IEnumerable<PropertyData> GetProperties<T>()
    where T : class
{
    const BindingFlags bindingFlags = BindingFlags.Public | BindingFlags.Instance;
    var properties = typeof(T).GetProperties(bindingFlags)
        .OrderBy(p => p.Name);

    using var provider = new CSharpCodeProvider();

    foreach (var property in properties)
    {
        if (property.GetCustomAttribute<ObsoleteAttribute>() is not null)
        {
            continue;
        }

        var isCollection = property.PropertyType.GetInterfaces().Any(p => p.IsGenericType && p.GetGenericTypeDefinition() == typeof(ICollection<>));
        var isNullable = property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>);
        var type = isCollection || isNullable ? property.PropertyType.GetGenericArguments().Single() : property.PropertyType;

        if (!property.CanWrite && !isCollection)
        {
            continue;
        }

        var typeReference = new CodeTypeReference(type);
        var alias = provider.GetTypeOutput(typeReference);

        var classes = NLogTypes
            .Where(p => typeof(T).IsSubclassOf(p) || typeof(T) == p)
            .OrderBy(p => typeof(T) == p);

        string summary = default;

        foreach (var cls in classes)
        {
            var key = $"P:{cls.FullName}.{property.Name}";
            SummaryMap.TryGetValue(key, out summary);

            if (!string.IsNullOrWhiteSpace(summary))
            {
                break;
            }
        }

        if (string.IsNullOrWhiteSpace(summary))
        {
            throw new InvalidOperationException($"Summary not found for {property.Name} in {typeof(T).Name}.");
        }

        yield return new PropertyData
        {
            Name = property.Name,
            Type = type,
            Alias = alias,
            Summary = summary,
            HasGetMethod = property.GetGetMethod() is not null,
            HasSetMethod = property.GetSetMethod() is not null,
            IsCollection = isCollection,
            IsNullable = isNullable
        };
    }
}

private static void ExtractText(StringBuilder stringBuilder, XmlNode node)
{
    if (stringBuilder is null)
    {
        throw new ArgumentNullException(nameof(stringBuilder));
    }

    if (node is null)
    {
        throw new ArgumentNullException(nameof(node));
    }

    foreach (var child in node.ChildNodes)
    {
        switch (child)
        {
            case XmlText xmlText:
                stringBuilder.Append(xmlText.Value);

                break;

            case XmlElement xmlElement:
                string text;
                if (xmlElement.HasAttribute("cref"))
                {
                    text = xmlElement.GetAttribute("cref");
                    stringBuilder.Append(text);
                }
                else if  (xmlElement.HasAttribute("langword"))
                {
                    text = xmlElement.GetAttribute("langword");
                    stringBuilder.Append(text);
                }
                else if  (xmlElement.HasAttribute("href"))
                {
                    text = xmlElement.GetAttribute("href");
                    stringBuilder.Append(text);
                    stringBuilder.Append(" ");
                }

                ExtractText(stringBuilder, xmlElement);

                break;
        }
    }
}

private static IEnumerable<KeyValuePair<string, string>> GetXmlMembers(string path)
{
    if (string.IsNullOrWhiteSpace(path))
    {
        throw new ArgumentException("Value cannot be null or whitespace.", nameof(path));
    }

    var document = new XmlDocument();
    document.Load(path);
    var root = document.DocumentElement ?? throw new InvalidOperationException();
    var elements = root.SelectNodes("//member[@name]") ?? throw new InvalidOperationException();

    foreach (XmlElement element in elements)
    {
        var name = element.GetAttribute("name");
        if (string.IsNullOrWhiteSpace(name))
        {
            throw new InvalidOperationException();
        }

        var summary = element.GetElementsByTagName("summary")[0];
        if (summary is null)
        {
            continue;
        }

        var stringBuilder = new StringBuilder();

        ExtractText(stringBuilder, summary);

        var value = Regex.Replace(stringBuilder.ToString(), @"[\r\n\s]+", " ", RegexOptions.Multiline, TimeSpan.FromSeconds(1))
            .Replace('"', '\'')
            .Trim();

        if (!(value.EndsWith("?") || value.EndsWith(".")))
        {
            value = $"{value}.";
        }

        yield return new KeyValuePair<string, string>(name, value);
    }
}

public class PropertyData
{
    public string Name { get; set; }
    public Type Type { get; set; }
    public string Alias { get; set; }
    public string Summary { get; set; }
    public bool HasGetMethod { get; set; }
    public bool HasSetMethod { get; set; }
    public bool IsCollection { get; set; }
    public bool IsNullable { get; set; }
}
#>